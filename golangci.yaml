# golangci.yaml contains all configuration options for the golangci-lint linter.

# Options for analysis running.
run:
  # The number of hardware threads to use for concurrency.
  # The default is the number of available CPU.
  # concurrency: 4

  # Timeout duration for analysis (e.g. 30s, 5m).
  # Default: 1m
  timeout: 3m

  # Exit code when at least one issue was found.
  # Default: 1
  issues-exit-code: 1

  # Include test files or not.
  # Default: true
  tests: true

  # List of build tags, all linters use it.
  # Default: []
  build-tags:
    - integration

  # Which dirs to skip: issues from them won't be reported.
  # Can use regexp here: `generated.*`, regexp is applied on full path.
  # Default value is empty list, but default dirs are skipped independently of
  # this option's value (see skip-dirs-use-default). "/" will be replaced by
  # current OS file path separator to properly work on Windows.
  skip-dirs:
    - api/fsutil/testdata
    - api/kube/testdata
    - api/kustomize/testdata
    - api/validate/testdata
    - diagrams
    - file/testdata
    - git/testdata
    - kube/testdata
    - kvstore/json/testdata
    - scripts

  # Enables skipping of directories:
  # - vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
  # Default: true
  skip-dirs-use-default: true

  # Allow multiple parallel golangci-lint instances running.
  # If false (default) - golangci-lint acquires file lock on start.
  allow-parallel-runners: true


# output configuration options
output:
  # Format:
  # colored-line-number, line-number, json, tab, checkstyle, code-climate,
  # junit-xml, github-actions
  #
  # Multiple can be specified by separating them by comma, output can be
  # provided for each of them by separating format name and path by colon
  # symbol. Output path can be either `stdout`, `stderr` or path to the file to
  # write to.
  #
  # Example: "checkstyle:report.json,colored-line-number"
  #
  # Default: colored-line-number
  format: colored-line-number

  # Print lines of code with issue.
  # Default: true
  print-issued-lines: true

  # Print linter name in the end of issue text.
  # Default: true
  print-linter-name: true

  # Make issues output unique by line.
  # Default: true
  uniq-by-line: true

  # Add a prefix to the output file references.
  # Default is no prefix.
  path-prefix: ""

  # Sort results by: filepath, line and column.
  sort-results: false

# All available settings of specific linters.
linters-settings:
  # bidichk checks for dangerous unicode character sequences.
  bidichk:
    # The following checks for all mentioned invisible unicode runes.
    # All runes are enabled by default.
    left-to-right-embedding: true
    right-to-left-embedding: true
    pop-directional-formatting: true
    left-to-right-override: true
    right-to-left-override: true
    left-to-right-isolate: true
    right-to-left-isolate: true
    first-strong-isolate: true
    pop-directional-isolate: true

    # cyclop calculates cyclomatic complexities of functions or packages.
    cyclop:
      # The maximal code complexity to report.
      max-complexity: 20
      # The maximal average package complexity.
      # If it's higher than 0.0 (float) the check is enabled
      # Default: 0.0
      package-average: 0
      # Should ignore tests.
      # Default: false
      skip-tests: true

  # dogsled checks assignments with too many black identifiers.
  dogsled:
    # Maximum number of sequential blank identifiers.
    # Default: 2
    max-blank-identifiers: 2

  # dupl detects code cloning.
  dupl:
  # Tokens count to trigger issue.
  # Default: 150.
  threshold: 150

  # errcheck reports about not checking for errors in type assertions.
  errcheck:
    # Report about not checking of errors in type assertions: `a := b.(Struct)`.
    # Default: false.
    check-type-assertions: true
    # Report assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`.
    # Default: false.
    check-blank: true

  # errorlint ensures errors are properly wrapped and compared.
  errorlint:
    # Check whether fmt.Errorf uses the %w verb for formatting errors.
    # See the https://github.com/polyfloyd/go-errorlint for caveats.
    # Default: true
    errorf: true
    # Check for plain type assertions and type switches.
    # Default: true
    asserts: true
    # Check for plain error comparisons.
    # Default: true
    comparison: true

  # exhaustive checks exhaustiveness of enum switch statements.
  exhaustive:
    # Check switch statements in generated files also.
    # Default: false.
    check-generated: false
    # Default: false.
    default-signifies-exhaustive: false
    # Enum members matching the supplied regex do not have to be listed in
    # switch statements to satisfy exhaustiveness.
    # Default: "".
    ignore-enum-members: ""
    # Consider enums only in package scopes, not in inner scopes.
    # Default: false.
    package-scope-only: false

  # gocognit checks the cognitive complexity of functions.
  gocognit:
  # Minimal code complexity to report.
  # Default: 30 (but we recommend 10-20).
  min-complexity: 25

  # goconst finds repeated strings that could be replaced by a constant.
  goconst:
    # Minimal length of string constant.
    # Default: 3.
    min-len: 3
    # Minimum occurrences of constant string count to trigger issue.
    # Default: 3.
    min-occurrences: 3
    # Ignore test files.
    # Default: false.
    ignore-tests: true
    # Look for existing constants matching the values.
    # Default: true.
    match-constant: true
    # Search also for duplicated numbers.
    # Default: false.
    numbers: true
    # Minimum value, only works with goconst.numbers
    # Default: 3.
    min: 3
    # Maximum value, only works with goconst.numbers
    # Default: 3.
    max: 3
    # Ignore when constant is not used as function argument.
    # Default: true.
    ignore-calls: true

  # gocritic checks for bugs, performance, and style issues.
  gocritic:
    # Which checks should be enabled; can't be combined with 'disabled-checks'.
    # See https://go-critic.github.io/overview#checks-overview.
    # To check which checks are enabled run
    # `GL_DEBUG=gocritic golangci-lint run`.
    # By default, list of stable checks is used.
    enabled-checks:
      - appendAssign  # Detects suspicious append result assignments.
      - argOrder      # Detects suspicious arguments order.
      - badCall       # Detects suspicious function calls.
      - badCond       # Detects suspicious condition expressions.
      - badLock       # Detects suspicious mutex lock/unlock operations.
      - badRegexp     # Detects suspicious regexp patterns.
      - caseOrder     # Detects erroneous case order inside switch statements.
      - codegenComment # Detects malformed 'code generated' file comments.
      - commentedOutCode # Detects commented-out code inside func bodies.
      - deprecatedComment # Detects malformed 'deprecated' doc-comments.
      - dupArg        # Detects suspicious duplicated arguments.
      - dupBranchBody # Detects duplicated branch bodies inside conditionals.
      - dupCase       # Detects duplicated case clauses inside switch/selects.
      - dupSubExpr    # Detects suspicious or duplicated sub-expressions.
      - emptyDecl     # Detects suspicious empty declaration blocks.
      - evalOrder     # Detects unwanted dependencies on the evaluation order.
      - exitAfterDefer # Detects call to exit/fatal in functions that use defer.
      - externalErrorReassign # Detects suspicious reassignment of error.
      - filepathJoin  # Detects problems in filepath.Join() calls.
      - mapKey        # Detects suspicious map literal keys.
      - nilValReturn  # Detects return statements whose results evaluate to nil.
      - offBy1        # Detects various off-by-one errors.
      - regexpPattern # Detects suspicious regexp patterns.
      - returnAfterHttpError # Detects http.Error call without following return.
      - sloppyReassign # Detects suspicious/confusing reassignments.
      - sloppyTypeAssert # Detects redundant type assertions.
      - sortSlice     # Detects suspicious sort.Slice calls.
      - sprintfQuotedString # Suggests `"%s"` should be "%q".
      - syncMapLoadAndDelete # Detects complex sync.Map load+delete to simplify.
      - truncateCmp   # Detects potential truncation comparison issues.
      - unnecessaryDefer  # Detects redundantly deferred calls.
      - weakCond      # Detects condition statements that are unsafe.
      - assignOp      # Detects assignments that can be simplified.
      - boolExprSimplify # Detects bool expressions that can be simplified.
      - builtinShadow # Detects when predeclared identifiers are shadowed.
      - captLocal     # Detects capitalized names for local variables.
      - commentFormatting # Detect comments with non-idiomatic formatting.
      - commentedOutImport # Detect commented-out imports.
      - defaultCaseOrder  # Detects when default in switch isn't first or last.
      - deferUnlambda # Detects deferred function literals that can be simpler.
      - dupImport     # Detects same import under different aliases.
      - elseif        # Detects else with nested if to replace with else-if.
      - emptyFallthrough # Detects fallthrough that can be avoided.
      - emptyStringTest # Detects non-idiomatic empty string checks.
      - exposedSyncMutex # Detects exposed methods from sync.Mutex.
      - hexLiteral    # Detects hex literals that have mixed case letter digits.
      - httpNoBody    # Detects nil usages in http.NewRequest calls.
      - ifElseChain   # Detects if-else statements that could be switch.
      - importShadow  # Detects when imported package names are shadowed.
      - initClause    # Detects non-assignment statements inside if/switch init.
      - ioutilDeprecated # Detects deprecated io/ioutil package uses.
      - methodExprCall # Detects method expression that can be a method call.
      - nestingReduce # Finds where nesting level could be reduced.
      - newDeref      # Detects immediate dereferencing of `new` expressions.
      - octalLiteral  # Detects old-style octal literals.
      - paramTypeCombine # Detects function parameters that could be combined.
      - ptrToRefParam # Detects parameters that point to referential types.
      - redundantSprint # Detects redundant fmt.Sprint calls.
      - regexpMust    # Detects regexp.Compile* that can be regexp.MustCompile*.
      - regexpSimplify # Detects regexp patterns that can be simplified.
      - singleCaseSwitch # Detect singe case switches that can be written as if.
      - sloppyLen     # Detects usage of `len` when result is obvious.
      - stringConcatSimplify # Detects string concat ops that can be simplified.
      - switchTrue    # Detects switch-over-bool that use explicit `true`.
      - timeExprSimplify # Detects manual conversion to milli- or microseconds.
      - typeAssertChain # Detects repeat type assertions to replace with switch.
      - typeDefFirst  # Detects method declarations before the type definition.
      - typeSwitchVar # Detects type switches that benefit from type guard.
      - typeUnparen   # Detects unneeded parenthesis inside type expressions.
      - underef       # Detects dereference expressions that can be omitted.
      - unlabelStmt   # Detects redundant statement labels.
      - unlambda      # Detects function literals that can be simplified.
      - unslice       # Detects slice expressions that can be simplified.
      - valSwap       # Detects value swapping without using parallel assigns.
      - whyNoLint     # Ensures that //nolint comments include an explanation.
      - wrapperFunc   # Detects call that can use convenience wrappers.
      - yodaStyleExpr # Detects Yoda style expressions.
      - appendCombine # Detects append to the same slice that can be merged.
      - equalFold     # Detects unoptimal case-insensitive comparison.
      - hugeParam     # Detects params that incur excessive amount of copying.
      - indexAlloc    # Detects strings.Index that may cause unwanted allocs.
      - preferDecodeRune # Detects unwanted rune slice allocation.
      - preferFprint  # Detects Sprint calls that can be replaced with Fprint.
      - preferStringWriter # Detects call that can be replaced with WriteString.
      - preferWriteByte # Detects WriteRune that can be WriteByte.
      - rangeExprCopy # Detects expensive copies o for loop range expressions.
      - rangeValCopy  # Detects loop that copy big objects for an iteration.
      - sliceClear    # Detects slice clear loops, suggests better idiom.
      - stringXbytes  # Detects redundant conversion between string and []byte.

      # Which checks should be disabled; can't be combined with 'enabled-checks'.
      # Default: []
      #disabled-checks:
      #- flagDeref     # Detects immediate dereferencing of `flag` pointers.
      #- flagName      # Detects suspicious flag names.
      #- sqlQuery      # Detects issue in Query() and Exec() calls.
      #- docStub       # Detects silenced complaints about doc-comments.
      #- ruleguard     # Runs user-defined rules using ruleguard linter.
      #- tooManyResultsChecker # Detects function with too many results.
      #- unnamedResult # Detects unnamed results that may benefit from names.
      #- unnecessaryBlock # Detects unnecessary braced statement blocks.

    # Enable multiple checks by tags, run `GL_DEBUG=gocritic golangci-lint run`
    # to see all tags and checks.
    # See https://github.com/go-critic/go-critic#usage -> section "Tags".
    # Default: []
    #enabled-tags:
    #disabled-tags:

    # Settings passed to gocritic.
    # The settings key is the name of a supported gocritic checker.
    # The list of supported checkers can be find in https://go-critic.github.io/overview.
    # Must be valid enabled check name.
    #settings:

  # gocyclo computes and checks function cyclomatic complexity.
  gocyclo:
    # Minimal code complexity to report.
    # Default: 30 (but we recommend 10-20)
    min-complexity: 20

  # godot checks if comments end in a period.
  godot:
    # Comments to be checked: `declarations`, `toplevel`, or `all`.
    # Default: declarations
    scope: declarations
    # Check that each sentence ends with a period.
    # Default: true
    period: true
    # Check that each sentence starts with a capital letter.
    # Default: false
    capital: false

  # godox detects FIXME, TODO, and other comment keywords.
  godox:
    # Report any comments starting with keywords, this is useful for TODO or
    # FIXME comments that might be left in the code accidentally and should be
    # resolved before merging.
    # Default: TODO, BUG, and FIXME.
    keywords:
      - TODO
      - BUG
      - FIXME
      - NOTE
      - OPTIMIZE # marks code that should be optimized before merging
      - HACK # marks hack-around that should be removed before merging

  # gofmt checks whether the code was gofmt-ed.
  gofmt:
  # Simplify code: gofmt with `-s` option.
  # Default: true
  simplify: true

  # gomnd detects magic numbers.
  gomnd:
    # List of enabled checks, see https://github.com/tommy-muehle/go-mnd/#checks for description.
    checks:
      - argument
      - assign
      - case
      - condition
      - operation
      - return
    # List of numbers to exclude from analysis.
    # The numbers should be written as string.
    # Values always ignored: "1", "1.0", "0" and "0.0"
    ignored-numbers:
      - '0666'
      - '0755'
    # List of file patterns to exclude from analysis.
    # Values always ignored: `.+_test.go`
    #ignored-files:
    #  - 'magic1_.*.go'
    # List of function patterns to exclude from analysis.
    # Values always ignored: `time.Time`
    ignored-functions:
      - 'math.*'
      - 'http.StatusText'

  # gomodguard lints for blocked modules.
  gomodguard:
    #allowed:
    #modules:                                                        # List of allowed modules
    # - gopkg.in/yaml.v2
    #domains:                                                        # List of allowed module domains
    # - golang.org
    blocked:
      modules: # List of blocked modules
        - github.com/src-d/go-git:
            recommendations:
              - github.com/go-git/go-git
            reason: "src-d is the old go-git maintainer"
      # - github.com/uudashr/go-module:                             # Blocked module
      #     recommendations:                                        # Recommended modules that should be used instead (Optional)
      #       - golang.org/x/mod
      #     reason: "`mod` is the official go.mod parser library."  # Reason why the recommended module should be used (Optional)
      #versions:                                                       # List of blocked module version constraints
      # - github.com/mitchellh/go-homedir:                          # Blocked module with version constraint
      #     version: "< 1.1.0"                                      # Version constraint, see https://github.com/Masterminds/semver#basic-comparisons
      #     reason: "testing if blocked version constraint works."  # Reason why the version constraint exists. (Optional)
      local_replace_directives: true                                # Set to true to raise lint issues for packages that are loaded from a local path via replace directive

  # gosimple lints to simplify code.
  gosimple:
    # Select the Go version to target.
    # Default: 1.13
    go: "1.17.6"
    # https://staticcheck.io/docs/options#checks
    checks: [ "all" ]

  # gosec inspects for security problems.
  gosec:
    # To select a subset of rules to run.
    # Available rules: https://github.com/securego/gosec#available-rules

    # Exclude generated files
    # Default: false
    exclude-generated: false

    # Filter out the issues with a lower severity than the given value.
    # Valid options are: low, medium, high.
    # Default: low
    severity: low

    # Filter out the issues with a lower confidence than the given value.
    # Valid options are: low, medium, high.
    # Default: low
    confidence: low

  # govet reports suspicious constructs like Printf calls that don't align.
  govet:
    # report about shadowed variables
    check-shadowing: true
    enable-all: true

  # ifshort ensures your code uses short syntax if-statements where possible.
  ifshort:
    # Maximum length of variable declaration measured in number of lines, after
    # which linter won't suggest using short syntax. Has higher priority than
    # max-decl-chars.
    # Default: 1
    max-decl-lines: 1
    # Maximum length of variable declaration measured in number of characters,
    # after which linter won't suggest using short syntax.
    # Default: 30
    max-decl-chars: 30

  # importas ensures import aliases are consistent.
  importas:
    # Do not allow unaliased imports of aliased packages.
    # Default: false
    no-unaliased: true
    # Do not allow non-required aliases.
    # Default: false
    no-extra-aliases: false
    # List of aliases
    alias:
      - pkg: github.com/go-kit/kit/transport/http
        alias: kithttp

  # ireturn suggests you accepts interfaces and return concrete types.
  ireturn:
    # ireturn allows using `allow` and `reject` settings at the same time.
    # Both settings are lists of the keywords and regular expressions matched to interface or package names.
    # keywords:
    # - `empty` for `interface{}`
    # - `error` for errors
    # - `stdlib` for standard library
    # - `anon` for anonymous interfaces

    # By default, it allows using errors, empty interfaces, anonymous interfaces,
    # and interfaces provided by the standard library.
    allow:
      - anon
      - error
      - empty
      - stdlib
      - (or|er)$ # Idiomatic endings for interface.

    # reject-list of interfaces
    #reject:
    #  - github.com\/user\/package\/v4\.Type

  # lll reports long lines.
  lll:
    # Max line length, lines longer will be reported.
    # '\t' is counted as 1 character by default, and can be changed with the
    # tab-width option.
    # Default: 120.
    line-length: 120
    # Tab width in spaces.
    # Default: 1
    tab-width: 1

  # misspell finds commonly misspelled words in comments.
  misspell:
    # Correct spellings using locale preferences for US or UK.
    # Default is to use a neutral variety of English.
    # Setting locale to US will correct the British spelling of 'colour' to
    # 'color'.
    locale: US
      #ignore-words:
    #  - someword

  # nakedret Finds naked returns in functions greater than a specified length.
  nakedret:
    # Make an issue if func has more lines of code than this setting, and it has
    # naked returns.
    # Default: 30
    max-func-lines: 30

  # nestif reports deeply nested if statements.
  nestif:
    # Minimal complexity of if statements to report.
    # Default: 5
    min-complexity: 5

  # nilnil ensures there are no simultaneous return of nil error and bad value.
  nilnil:
    # Checks that there is no simultaneous return of `nil` error and an invalid
    # value.
    # Default: ptr, func, iface, map, chan
    checked-types:
      - ptr
      - func
      - iface
      - map
      - chan

  # nolintlint finds ill-formed or insufficiently explained nolint directives.
  nolintlint:
    # Disable to ensure that all nolint directives actually have an effect.
    # Default: false
    allow-unused: false
    # Disable to ensure that nolint directives don't have a leading space.
    # Default: true
    allow-leading-space: true
    # Exclude following linters from requiring an explanation.
    # Default: []
    allow-no-explanation: []
    # Enable to require an explanation of nonzero length after each nolint
    # directive.
    # Default: false
    require-explanation: true
    # Enable to require nolint directives to mention the specific linter being
    # suppressed.
    # Default: false
    require-specific: true

  # prealloc finds slice declarations that could be preallocated.
  prealloc:
    # IMPORTANT: we don't recommend using this linter before doing performance
    # profiling. For most programs usage of prealloc will be a premature
    # optimization.
    #
    # Report pre-allocation suggestions only on simple loops that have no
    # returns/breaks/continues/gotos in them.
    # Default: true
    simple: true
    # Report pre-allocation suggestions on range loops.
    # Default: true
    range-loops: true
    # Report pre-allocation suggestions on for loops.
    # Default: false
    for-loops: true

  # predeclared finds code that shadows predeclared identifiers.
  predeclared:
    # Comma-separated list of predeclared identifiers to not report on.
    # Default: ""
    ignore: ""
    # Include method names and field names (i.e., qualified names) in checks.
    # Default: false
    q: true

  # promlinter checks Prometheus metric naming via promlint.
  promlinter:
    # Promlinter cannot infer all metrics name in static analysis. Enable strict
    # mode will also include the errors caused by failing to parse the args.
    # Default: false
    strict: true
    # Please refer to https://github.com/yeya24/promlinter#usage for detailed
    # usage.
    #disabled-linters:
    #  - Help
    #  - MetricUnits
    #  - Counter
    #  - HistogramSummaryReserved
    #  - MetricTypeInName
    #  - ReservedChars
    #  - CamelCase
    #  - UnitAbbreviations

  # revive is a drop-in replacement for golint.
  revive:
    # See https://github.com/mgechev/revive#available-rules for details.
    ignore-generated-header: false
    severity: warning
    enable-all-rules: true
    # confidence: 0.8
    # error-code: 0
    # warning-code: 0
    rules:
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#add-constant
      - name: add-constant
        severity: warning
        disabled: true
        arguments:
          - maxLitCount: "3"
            allowStrs: '""'
            allowInts: "0,1,2"
            allowFloats: "0.0,0.,1.0,1.,2.0,2."
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#atomic
      - name: atomic
        severity: warning
        disabled: false
      - name: argument-limit
        severity: warning
        disabled: false
        arguments:
          - 4
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#banned-characters
      - name: banned-characters
        severity: warning
        disabled: true
        arguments: ["Ω","Σ","σ", "7"]
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#bare-return
      - name: bare-return
        severity: warning
        disabled: true
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#blank-imports
      - name: blank-imports
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#bool-literal-in-expr
      - name: bool-literal-in-expr
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#call-to-gc
      - name: call-to-gc
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#cognitive-complexity
      - name: cognitive-complexity
        severity: warning
        disabled: true
        arguments: [ 7 ]
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#confusing-naming
      - name: confusing-naming
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#confusing-results
      - name: confusing-results
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#constant-logical-expr
      - name: constant-logical-expr
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#context-as-argument
      - name: context-as-argument
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#context-keys-type
      - name: context-keys-type
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#cyclomatic
      - name: cyclomatic
        severity: warning
        disabled: true
        arguments: [ 3 ]
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#deep-exit
      - name: deep-exit
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#defer
      - name: defer
        severity: warning
        disabled: false
        arguments:
          - [ "call-chain", "loop", "method-call", "recover", "return" ]
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#dot-imports
      - name: dot-imports
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#duplicated-imports
      - name: duplicated-imports
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#early-return
      - name: early-return
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#empty-block
      - name: empty-block
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#empty-lines
      - name: empty-lines
        severity: warning
        disabled: true
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#error-naming
      - name: error-naming
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#error-return
      - name: error-return
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#error-strings
      - name: error-strings
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#errorf
      - name: errorf
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#exported
      - name: exported
        severity: warning
        disabled: false
        arguments:
          - "checkPrivateReceivers"
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#file-header
      - name: file-header
        severity: warning
        disabled: true
        arguments:
          - This is the text that must appear at the top of source files.
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#flag-parameter
      - name: flag-parameter
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#function-result-limit
      - name: function-result-limit
        severity: warning
        disabled: false
        arguments: [ 3 ]
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#function-length
      - name: function-length
        severity: warning
        disabled: true
        arguments: [ 40, 60 ]
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#get-return
      - name: get-return
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#identical-branches
      - name: identical-branches
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#if-return
      - name: if-return
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#increment-decrement
      - name: increment-decrement
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#indent-error-flow
      - name: indent-error-flow
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#imports-blacklist
      - name: imports-blacklist
        severity: warning
        disabled: true
        arguments:
          - "crypto/md5"
          - "crypto/sha1"
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#import-shadowing
      - name: import-shadowing
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#line-length-limit
      - name: line-length-limit
        severity: warning
        disabled: true # handled by lll
        arguments: [ 80 ]
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#max-public-structs
      - name: max-public-structs
        severity: warning
        disabled: true
        arguments: [ 3 ]
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#modifies-parameter
      - name: modifies-parameter
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#modifies-value-receiver
      - name: modifies-value-receiver
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#nested-structs
      - name: nested-structs
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#optimize-operands-order
      - name: optimize-operands-order
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#package-comments
      - name: package-comments
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#range
      - name: range
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#range-val-in-closure
      - name: range-val-in-closure
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#range-val-address
      - name: range-val-address
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#receiver-naming
      - name: receiver-naming
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#redefines-builtin-id
      - name: redefines-builtin-id
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#string-of-int
      - name: string-of-int
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#string-format
      - name: string-format
        severity: warning
        disabled: true
        arguments:
          - - 'core.WriteError[1].Message'
            - '/^([^A-Z]|$)/'
            - must not start with a capital letter
          - - 'fmt.Errorf[0]'
            - '/(^|[^\.!?])$/'
            - must not end in punctuation
          - - panic
            - '/^[^\n]*$/'
            - must not contain line breaks
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#struct-tag
      - name: struct-tag
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#superfluous-else
      - name: superfluous-else
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#time-equal
      - name: time-equal
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#time-naming
      - name: time-naming
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#var-naming
      - name: var-naming
        severity: warning
        disabled: true
        arguments:
          - [ "ID" ] # AllowList
          - [ "VM" ] # DenyList
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#var-declaration
      - name: var-declaration
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#unconditional-recursion
      - name: unconditional-recursion
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#unexported-naming
      - name: unexported-naming
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#unexported-return
      - name: unexported-return
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#unhandled-error
      - name: unhandled-error
        severity: warning
        disabled: false
        arguments:
          - "fmt.Printf"
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#unnecessary-stmt
      - name: unnecessary-stmt
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#unreachable-code
      - name: unreachable-code
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#unused-parameter
      - name: unused-parameter
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#unused-receiver
      - name: unused-receiver
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#useless-break
      - name: useless-break
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#waitgroup-by-value
      - name: waitgroup-by-value
        severity: warning
        disabled: false

  # staticcheck is another static analyzer.
  staticcheck:
    # Select the Go version to target.
    # Default: 1.13
    go: "1.17.6"
    # https://staticcheck.io/docs/options#checks
    checks: [ "all" ]

  forbidigo:
    # Forbid the following identifiers
    forbid:
      - fmt.Print.* # too much log noise
      - ginkgo\\.F.* # these are used just for local development

  # tagliatelle checks struct tags.
  tagliatelle:
    # Check the struck tag name case.
    case:
      # Use the struct field name to check the name of the struct tag.
      # Default: false
      use-field-name: true
      rules:
        # Any struct tag type can be used.
        # Support string case: `camel`, `pascal`, `kebab`, `snake`, `goCamel`,
        # `goPascal`, `goKebab`, `goSnake`, `upper`, `lower`
        json: camel
        yaml: camel
        xml: camel
        bson: camel
        avro: snake
        mapstructure: kebab

  # thelper detects golang test helpers without t.Helper() call.
  thelper:
    # The following configurations enable all checks.
    # All checks are enabled by default.
    test:
      first: true
      name: true
      begin: true
    benchmark:
      first: true
      name: true
      begin: true
    tb:
      first: true
      name: true
      begin: true

  # unparam reports unused function parameters.
  unparam:
    # Inspect exported functions.
    #
    # Set to true if no external program/library imports your code.
    # XXX: if you enable this setting, unparam will report a lot of
    # false-positives in text editors:
    # if it's called for subdir of a project it can't find external interfaces.
    # All text editor integrations with golangci-lint call it on a directory
    # with the changed file.
    #
    # Default: false
    check-exported: false

  # varcheck finds unused global variables and constants.
  varcheck:
    # Check usage of exported fields and variables.
    # Default: false
    exported-fields: false

  # varnamelen checks if the length of a variable's name matches its scope.
  varnamelen:
    # The longest distance, in source lines, that is being considered a
    # "small scope". Variables used in at most this many lines will be ignored.
    # Default: 12
    max-distance: 12
    # The minimum length of a variable's name that is considered "long".
    # Variable names that are at least this long will be ignored.
    # Default: 1
    min-name-length: 1
    # Check method receiver names.
    # Default: false
    check-receiver: false
    # Check named return values.
    # Default: false
    check-return: false
    # Ignore "ok" variables that hold the bool return value of a type assertion.
    # Default: false
    ignore-type-assert-ok: false
    # Ignore "ok" variables that hold the bool return value of a map index.
    # Default: false
    ignore-map-index-ok: false
    # Ignore "ok" variables that hold the bool return value of a channel receive.
    # Default: false
    ignore-chan-recv-ok: false
    # Optional list of variable names that should be ignored completely.
    # Default: []
    ignore-names:
      - err
    # Optional list of variable declarations that should be ignored completely.
    # Entries must be in the form of "<variable name> <type>" or
    # "<variable name> *<type>" for variables, or "const <name>" for constants.
    # Default: []
    #ignore-decls:
    #  - c echo.Context
    #  - t testing.T
    #  - f *foo.Bar
    #  - e error
    #  - i int
    #  - const C

  # wrapcheck checks that errors returned from external packages are wrapped.
  wrapcheck:
  # An array of strings that specify substrings of signatures to ignore.
  # If this set, it will override the default set of ignored signatures.
  # See https://github.com/tomarrell/wrapcheck#configuration for more information.
  #ignoreSigs:
  #  - .Errorf(
  #  - errors.New(
  #  - errors.Unwrap(
  #  - .Wrap(
  #  - .Wrapf(
  #  - .WithMessage(
  #  - .WithMessagef(
  #  - .WithStack(
  #ignoreSigRegexps:
  #  - \.New.*Error\(
  #ignorePackageGlobs:
  #  - encoding/*
  #  - github.com/pkg/*

linters:
  enable:
    - asciicheck       # Ensures code doesn't contain non-ASCII identifiers.
    - bidichk          # Checks for non-ASCII identifiers.
    - bodyclose        # Ensures the HTTP response body is closed successfully.
    - containedctx     # Detects struct containing context.Context.
    - contextcheck     # Checks for non-inherited context.Context.
    - deadcode         # Finds unused code.
    - dogsled          # Checks assignments with too many blank identifiers.
    - dupl             # Code clone detection.
    - durationcheck    # Check for two durations multiplied together.
    - errcheck         # Checks for unchecked errors.
    - errorlint        # Find problems with the error wrapping scheme.
    - errname          # Checks for properly named error variables and types.
    - exhaustive       # Check exhaustiveness of enum switch statements.
    - exportloopref    # Checks for pointers to enclosing loop variables.
    - forbidigo        # Forbids identifiers.
    - gochecknoglobals # Check that no global variables exist.
    - gochecknoinits   # Checks that no init functions are present.
    - gocognit         # Computes function cognitive complexity.
    - goconst          # Finds strings that could be replaced by a constant.
    - gocritic         # Checks for bugs, performance and style issues.
    - gocyclo          # Computes function cyclomatic complexity.
    - godot            # Check if comments end in a period.
    - godox            # Detects FIXME, TODO, etc.
    - gofmt            # Checks whether code was gofmt-ed.
    - godot            # Checks if comments end in a period.
    - godox            # Checks for FIXME, TODO and other comment keywords.
    - goerr113         # Checks the errors handling expressions.
    - goimports        # Checks whether code was goimport-ed.
    - gomnd            # Detects magic numbers.
    - gomodguard       # Allow and block list linter for modules.
    - goprintffuncname # Ensures printf-like functions have an 'f' suffix.
    - gosec            # Inspects source code for security problems.
    - gosimple         # Helps simplify code.
    - govet            # Runs go vet.
    - ifshort          # Use short if-statement syntax whenever possible.
    - importas         # Enforces consistent import aliases.
    - ineffassign      # Detects unused assignments.
    - ireturn          # Accept interfaces, return concrete types.
    - lll              # Reports very long lines.
    - makezero         # Finds slice declarations with non-zero initial length.
    - misspell         # Finds commonly misspelled English words in comments.
    - nakedret         # Finds naked returns in functions.
    - nestif           # Reports deeply nested if statements.
    - nilerr           # Finds nil returns when the error is not nil.
    - nilnil           # Checks for simultaneous return of nil error and value.
    - noctx            # Finds sending http.Request without context.Context.
    - nolintlint       # Reports ill-formed or insufficient nolint directives.
    - paralleltest     # Detects missing  call to t.Parallel() in your tests.
    - prealloc         # Finds slice declarations that could be preallocated.
    - predeclared      # Find code that shadows predeclared identifiers.
    - promlinter       # Check Prometheus metrics naming via promlint.
    - revive           # Drop-in replacement of golint.
    - staticcheck      # go vet on steroids.
    - structcheck      # Finds unused struct fields.
    - tagliatelle      # Checks the struct tags.
    - tenv             # Detects use of os.SetEnv instead of t.SetEnv instead.
    - thelper          # Detects test helpers without t.Helper().
    - tparallel        # Detects inappropriate usage of t.Parallel().
    - typecheck        # Parses and type-checks.
    - unconvert        # Detects unnecessary type conversions.
    - unparam          # Detects unused function parameters.
    - unused           # Checks for unused code.
    - varcheck         # Finds unused global variables and constants.
    - varnamelen       # Checks length of variable's name matches its scope.
    - wastedassign     # Finds wasted assignment statements.
    - wrapcheck        # Ensures errors from external packages are wrapped.
  fast: false

issues:
  # List of regexps of issue texts to exclude.
  #
  # But independently of this option we use default exclude patterns,
  # it can be disabled by `exclude-use-default: false`.
  # To list all excluded by default patterns execute `golangci-lint run --help`
  #
  # Default: []
  #exclude:

  # Excluding configuration per-path, per-linter, per-text and per-source
  #exclude-rules:

  # Independently of option `exclude` we use default exclude patterns,
  # it can be disabled by this option.
  # To list all excluded by default patterns execute `golangci-lint run --help`.
  # Default: true.
  exclude-use-default: true

  # If set to true exclude and exclude-rules regular expressions become
  # case-sensitive.
  # Default: false
  exclude-case-sensitive: false

  # The list of ids of default excludes to include or disable.
  # Default: []
  #include:

  # Maximum issues count per one linter. Set to 0 to disable.
  # Default: 50
  max-issues-per-linter: 0

  # Maximum count of issues with the same text. Set to 0 to disable.
  # Default: 3
  max-same-issues: 0

  # Show only new issues: if there are unstaged changes or untracked files,
  # only those changes are analyzed, else only changes in HEAD~ are analyzed.
  # It's a super-useful option for integration of golangci-lint into existing
  # large codebase. It's not practical to fix all existing issues at the moment
  # of integration: much better don't allow issues in new code.
  #
  # Default: false.
  new: false

  # Show only new issues created after git revision `REV`.
  #new-from-rev: HEAD

  # Show only new issues created in git patch with set file path.
  #new-from-patch: path/to/patch/file

  # Fix found issues (if it's supported by the linter).
  fix: false

severity:
  # Set the default severity for issues.
  #
  # If severity rules are defined and the issues do not match or no severity is
  # provided to the rule this will be the default severity applied. Severities
  # should match the supported severity names of the selected out format.
  # - Code climate: https://docs.codeclimate.com/docs/issues#issue-severity
  # - Checkstyle: https://checkstyle.sourceforge.io/property_types.html#severity
  # - GitHub: https://help.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-an-error-message
  #
  # Default value is an empty string.
  default-severity: error

  # If set to true `severity-rules` regular expressions become case-sensitive.
  # Default: false
  case-sensitive: false

  # When a list of severity rules are provided, severity information will be added to lint issues.
  # Severity rules have the same filtering capability as exclude rules
  # except you are allowed to specify one matcher per severity rule.
  # Only affects out formats that support setting severity information.
  #
  # Default: []
  #rules:
  #  - linters:
  #      - dupl
  #    severity: info